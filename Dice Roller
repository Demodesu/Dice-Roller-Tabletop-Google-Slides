function onOpen() {
  SlidesApp.getUi()
    .createMenu("Dice Roller")
    .addItem("Roll d4 (Single)", "rollD4Single")
    .addItem("Roll d6 (Single)", "rollD6Single")
    .addItem("Roll d8 (Single)", "rollD8Single")
    .addItem("Roll d10 (Single)", "rollD10Single")
    .addItem("Roll d12 (Single)", "rollD12Single")
    .addItem("Roll d20 (Single)", "rollD20Single")
    .addItem("Roll d4 (Multiple)", "rollD4Multiple")
    .addItem("Roll d6 (Multiple)", "rollD6Multiple")
    .addItem("Roll d8 (Multiple)", "rollD8Multiple")
    .addItem("Roll d10 (Multiple)", "rollD10Multiple")
    .addItem("Roll d12 (Multiple)", "rollD12Multiple")
    .addItem("Roll d20 (Multiple)", "rollD20Multiple")
    .addToUi();
}

function getHowManyDie() {
  const ui = SlidesApp.getUi();
  const response = ui.prompt("How many to roll?", "Enter number:", ui.ButtonSet.OK_CANCEL);
  if (response.getSelectedButton() === ui.Button.OK) {
    var answer = response.getResponseText()
    if (answer > 20){
      answer = 20
    }
    return answer;
  } else {
    return null;
  }
}

function rollDie(sides) {
  return Math.floor(Math.random() * sides) + 1;
}

function insertRollResult(die, value, number) {
  const slide = SlidesApp.getActivePresentation().getSelection().getCurrentPage();
  if (!slide) {
    SlidesApp.getUi().alert("Please select a slide to insert the roll result.");
    return;
  }

  const elements = slide.getPageElements();

  let has_counter = false;
  let counter_value = 0;

  for (let i = 0; i < elements.length; i++) {
    const element = elements[i];

    if (element.getPageElementType() === SlidesApp.PageElementType.SHAPE) {
      const shape = element.asShape();
      const text = shape.getText().asString();

      // Remove old dice roll text box
      if (text.includes("🍀🎲 Dice Roll")) {
        shape.remove();
        continue;
      }

      // Handle Roll Counter
      if (text.includes("Times Used")) {
        has_counter = true;

        // Parse integer value after colon
        const colonIndex = text.indexOf(":");
        if (colonIndex !== -1) {
          const counterString = text.substring(colonIndex + 1).trim();
          const parsed = parseInt(counterString);
          if (!isNaN(parsed)) {
            counter_value = parsed + 1;
          }
        }

        // Remove the old counter box
        shape.remove();
        continue;
      }
    }
  }

  // Format the dice roll result
  const roll_values = value.join(", ");
  const text = `🍀🎲 Dice Roll (${number}d${die}): ${roll_values} 🎲🍀`;
  const rollBox = slide.insertTextBox(text)
    .setLeft(0)
    .setTop(-30)
    .setWidth(SlidesApp.getActivePresentation().getPageWidth())
    .setHeight(25);

  const textStyle = rollBox.getText().getTextStyle();
  textStyle.setBackgroundColor("#000000");
  textStyle.setFontFamily("Book Antiqua");
  textStyle.setItalic(true);
  textStyle.setForegroundColor("#FFFFFF");
  textStyle.setFontSize(18);

  // Highlight "Dice Roll" in yellow and bold
  const boldStart = rollBox.getText().asString().indexOf("Dice Roll");
  const boldEnd = boldStart + "Dice Roll".length;
  if (boldStart !== -1) {
    const range = rollBox.getText().getRange(boldStart, boldEnd);
    range.getTextStyle().setBold(true);
    range.getTextStyle().setForegroundColor("#FFFF00");
  }

  // Add the roll counter
  const rollCounterText = `Times Used: ${counter_value}`;
  const counterBox = slide.insertTextBox(rollCounterText)
    .setLeft(0)
    .setTop(-30-25)
    .setWidth(SlidesApp.getActivePresentation().getPageWidth())
    .setHeight(25);

  const counterStyle = counterBox.getText().getTextStyle();
  counterStyle.setBackgroundColor("#000000");
  counterStyle.setFontFamily("Book Antiqua");
  counterStyle.setItalic(true);
  counterStyle.setForegroundColor("#FFFFFF");
  counterStyle.setFontSize(18);
}

// Single Roll

function rollD4Single() {

  const roll_list = []
  const result = rollDie(4)
  const number = 1
  roll_list.push(result)

  insertRollResult(4, roll_list, number);
}

function rollD6Single() {

  const roll_list = []
  const result = rollDie(6)
  const number = 1
  roll_list.push(result)

  insertRollResult(6, roll_list, number);
}

function rollD8Single() {

  const roll_list = []
  const result = rollDie(8)
  const number = 1
  roll_list.push(result)

  insertRollResult(8, roll_list, number);
}

function rollD10Single() {

  const roll_list = []
  const result = rollDie(10)
  const number = 1
  roll_list.push(result)

  insertRollResult(10, roll_list, number);
}

function rollD12Single() {

  const roll_list = []
  const result = rollDie(12)
  const number = 1
  roll_list.push(result)

  insertRollResult(12, roll_list, number);
}

function rollD20Single() {

  const roll_list = []
  const result = rollDie(20)
  const number = 1
  roll_list.push(result)

  insertRollResult(20, roll_list, number);
}

// Multiple Roll

function rollD4Multiple() {
  const number = getHowManyDie();
  if (!number) return;

  const roll_list = []
  for (let i = 0; i < number; i++){
    const result = rollDie(4)
    roll_list.push(result)
  }

  insertRollResult(4, roll_list, number);
}

function rollD6Multiple() {
  const number = getHowManyDie();
  if (!number) return;

  const roll_list = []
  for (let i = 0; i < number; i++){
    const result = rollDie(6)
    roll_list.push(result)
  }

  insertRollResult(6, roll_list, number);
}

function rollD8Multiple() {
  const number = getHowManyDie();
  if (!number) return;

  const roll_list = []
  for (let i = 0; i < number; i++){
    const result = rollDie(8)
    roll_list.push(result)
  }

  insertRollResult(8, roll_list, number);
}

function rollD10Multiple() {
  const number = getHowManyDie();
  if (!number) return;

  const roll_list = []
  for (let i = 0; i < number; i++){
    const result = rollDie(10)
    roll_list.push(result)
  }

  insertRollResult(10, roll_list, number);
}

function rollD12Multiple() {
  const number = getHowManyDie();
  if (!number) return;

  const roll_list = []
  for (let i = 0; i < number; i++){
    const result = rollDie(12)
    roll_list.push(result)
  }

  insertRollResult(12, roll_list, number);
}

function rollD20Multiple() {
  const number = getHowManyDie();
  if (!number) return;

  const roll_list = []
  for (let i = 0; i < number; i++){
    const result = rollDie(20)
    roll_list.push(result)
  }

  insertRollResult(20, roll_list, number);
}
